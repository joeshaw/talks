Galaxy
Uber, but for Docker Containers

GopherCon
10 July 2015

Joe Shaw
@joeshaw
joe@joeshaw.org

https://github.com/litl/galaxy

* Galaxy

[[https://github.com/litl/galaxy]]

A Heroku-like micro-PaaS

Ideal for running multiple stateless microservices across a modest
number (10s to 100s) of hosts.

Minimal dependencies: two Go binaries plus Redis or Consul for
storage.

Does not attempt to approach the feature set (or complexity) of
Kubernetes.

* Components

*Commander* - Container deployment and service discovery

*Shuttle* - An HTTP/TCP/UDP reverse proxy configured through an HTTP-based API

* Concepts

*Environment* - A namespace for pools and apps

*Pool* - A set of hosts in a particular environment

*App* - A docker image and associated configuration

*Stack* - A template for creating pools

Apps are created in each environment and then _assigned_ to one or
more pools.

* Configuration

Two types of configuration

*Application* - Configuration of the app itself via environment variables

    commander config:set AWS_ACCESS_KEY_ID=AKJBKO9P9QQ4SNJI5JXA

*Runtime* - Configuration of the runtime environment

    commander runtime:set -vhost foo.example.com some_app

* Example

    $ commander app

    NAME            ENV    VERSION                                   IMAGE ID      CONFIG  POOLS
    polecat         prod   registry.example.com/polecat:20150608.1   017bd19c3d87  20      rfmweb
    seymour         prod   registry.example.com/seymour:20150604.1   566a90c7db98  14      rfmweb
    apiary          prod   registry.example.com/apiary:20150626.1    25e28ca4368a  86      rfmweb
    polecat         stage  registry.example.com/polecat:20150608.1   017bd19c3d87  43      rfmweb
    seymour         stage  registry.example.com/seymour:20150604.1   566a90c7db98  40      rfmweb
    apiary          stage  registry.example.com/apiary:20150626.1    25e28ca4368a  272     rfmweb
    polecat         dev    registry.example.com/polecat:latest       3ff4287a18bb  166     rfmweb
    seymour         dev    registry.example.com/seymour:latest       80ffb6c81b8c  95      rfmweb
    apiary          dev    registry.example.com/apiary:latest        2c1cca379181  1486    rfmweb
    marten_         dev    registry.example.com/marten:20150417.1    4b43d65fcb25  10      marten

* Demo

* Demo script

    boot2docker up
    eval $(boot2docker shellinit)

    # Can use redis or consul, we're using redis for simplicity
    docker run -d --name redis -p 6379:6379 redis

    # Environment variables for Galaxy
    export GALAXY_REGISTRY_URL=redis://$(boot2docker ip):6379
    export GALAXY_ENV=local
    export GALAXY_POOL=web

    # Start shuttle, the HTTP reverse proxy on our host
    shuttle -http 0.0.0.0:8080

    # Start the commander agent, which handles the containers and
    # service discovery
    commander -shuttle-addr 127.0.0.1:9090 -host-ip $(boot2docker ip) agent

    # Create the app
    commander app:create nginx

* Demo script (cont'd)

    # Deploy the docker image.  First argument is app name, second is
    # docker image.
    commander app:deploy nginx nginx:1.7

    # Assign nginx to the pool
    commander app:assign nginx

    # Look at the shuttle config to see that it's been configured with
    # nginx
    curl localhost:9090/_config

    # Hit shuttle, but see that we get a 404 Not Found error.
    curl localhost:8080

    # This is because no virtual host is set yet and shuttle doesn't
    # know how to route the request.  Fix that.
    commander runtime:set -vhost localhost nginx
    curl localhost:8080

    # We can upgrade the container without any downtime.  This updates
    # the image from nginx:1.7 to nginx:latest
    commander app:deploy nginx nginx

* Demo script (cont'd)

    # Now do the same with another app, in the same pool, but with a
    # different vhost
    commander app:create ghost
    commander app:deploy ghost ghost
    commander runtime:set -vhost localhost.joeshaw.org ghost
    commander app:assign ghost
    curl localhost.joeshaw.org:8080


